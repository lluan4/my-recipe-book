name: SonarQube          # (na verdade SonarCloud)

on:
  push:
    branches: [ develop ]
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build • Test • SonarCloud
    runs-on: windows-latest

    steps:
    # —————————————————————————— Infra básica ——————————————————————————
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0         # necessário p/ análise de PR

    - name: Set up JDK 17      # usado internamente pelo scanner
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 17

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x  # ajuste para a versão do seu projeto

    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner   # só se não veio do cache
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory -Force
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    # ——————————————————— Build / Test / Análise ———————————————————
    - name: Restore
      run: dotnet restore

    - name: SonarCloud — Begin
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin `
          /k:"lluan94-github_my-recipe-book" `
          /o:"lluan94-github" `
          /d:sonar.token="$Env:SONAR_TOKEN" `
          /d:sonar.host.url="https://sonarcloud.io" `
          # caminho(s) do relatório de cobertura:
          /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.opencover.xml"

    - name: Build (Release)
      run: dotnet build --configuration Release --no-restore

    - name: Test with coverage
      run: >
        dotnet test
        --configuration Release
        --no-build
        --collect:"XPlat Code Coverage"
        --results-directory TestResults

    - name: SonarCloud — End & Upload
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: pwsh
      run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="$Env:SONAR_TOKEN"
