name: CI (.NET + SonarCloud – scanner CLI)

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:
    inputs:
      buildConfiguration:
        description: "Debug ou Release"
        default: "Release"
        required: true

env:
  BUILD_CONFIGURATION: ${{ github.event.inputs.buildConfiguration || 'Release' }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  ORGANIZATION_KEY: lluanlima94-github
  PROJECT_KEY: lluanlima94-github_my-recipe-book
  SONAR_HOST: ${{ vars.SONAR_HOST }}

jobs:
  build-and-analyze:
    name: Build, Test and Analyze
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. Configurar o JDK 
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    # 3. Configurar o .NET SDK
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x' 

    # 4. Configurar o cache para pacotes NuGet e para o SonarScanner
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-
    
    - name: Cache SonarScanner
      id: sonar-scanner-cache
      uses: actions/cache@v4
      with:
        path: ./.sonar/scanner
        key: sonar-scanner-${{ runner.os }}
        restore-keys: |
          sonar-scanner-${{ runner.os }}

    # 5. Instalar o SonarScanner se não estiver em cache
    - name: Install SonarScanner
      if: steps.sonar-scanner-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    # 6. Restaurar dependências do projeto
    - name: Restore dependencies
      run: dotnet restore

    # 7. Iniciar a análise do SonarScanner
    - name: SonarScanner begin step
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /o:"${{ env.ORGANIZATION_KEY }}" \
            /k:"${{ env.PROJECT_KEY }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST }}" \
            /d:sonar.token="${{ env.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="${{ github.workspace }}/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="${{ github.workspace }}/test-results.trx" \
            /d:sonar.pullrequest.provider="github" \
            /d:sonar.pullrequest.github.repository="${{ github.repository }}" \
            /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" \
            /d:sonar.pullrequest.branch="${{ github.head_ref }}" \
            /d:sonar.pullrequest.base="${{ github.base_ref }}"
        # Para eventos de Push, executa a análise padrão na branch
        else
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /o:"${{ env.ORGANIZATION_KEY }}" \
            /k:"${{ env.PROJECT_KEY }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST }}" \
            /d:sonar.token="${{ env.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="${{ github.workspace }}/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="${{ github.workspace }}/test-results.trx"
        fi

    # 8. Build do projeto
    - name: Build project
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    # 9. Executar testes e gerar relatórios de cobertura e resultados
    - name: Run tests and collect coverage
      run: |
        dotnet test \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=${{ github.workspace }}/test-results.trx" \
          --results-directory "${{ github.workspace }}/" \
          -p:CollectCoverage=true \
          -p:CoverletOutputFormat=opencover \
          -p:CoverletOutput="${{ github.workspace }}/coverage.opencover.xml" \
          -p:MergeWith="${{ github.workspace }}/coverage.opencover.xml"

    # 10. Finalizar a análise e enviar os resultados para o SonarCloud
    - name: SonarScanner end step
      run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"

