name: CI (.NET + SonarCloud)

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:
    inputs:
      buildConfiguration:
        description: "Debug ou Release"
        default: "Release"

env:
  BUILD_CONFIGURATION: ${{ github.event.inputs.buildConfiguration || 'Release' }}
  SONAR_TOKEN:       ${{ secrets.SONAR_TOKEN }}
  PROJECT_KEY:       lluanlima94_back     # ← ajuste
  ORGANIZATION_KEY:  lluanlima94          # ← ajuste

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0                 # Sonar recomenda histórico completo

      # 2. JDK 17 (requisito do scanner)
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3. .NET SDK 9
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # 4. Cache NuGet
      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # 5. Cache SonarCloud (pacotes e scanner)
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: |
            ${{ runner.os }}-sonar-scanner

      - name: Install dotnet‑sonarscanner (if not cached)
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      # 6. Restore / Build / Test (+ cobertura)
      - name: dotnet restore
        run: dotnet restore

      - name: dotnet build
        run: dotnet build --configuration "$BUILD_CONFIGURATION" --no-restore

      - name: dotnet test (OpenCover)
        run: |
          dotnet test \
            --configuration "$BUILD_CONFIGURATION" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            --logger "trx" \
            --no-build

      # 7. SonarCloud – begin / build / test / end
      - name: SonarCloud begin / build / test / end
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"$PROJECT_KEY" \
            /o:"$ORGANIZATION_KEY" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

          dotnet build --configuration "$BUILD_CONFIGURATION" --no-restore

          dotnet test \
            --configuration "$BUILD_CONFIGURATION" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            --logger "trx" \
            --no-build

          .sonar/scanner/dotnet-sonarscanner end \
            /d:sonar.token="$SONAR_TOKEN"
