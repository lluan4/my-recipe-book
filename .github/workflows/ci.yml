name: CI (.NET + SonarCloud – scanner CLI)

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:
    inputs:
      buildConfiguration:
        description: "Debug ou Release"
        default: "Release"

env:
  BUILD_CONFIGURATION: ${{ github.event.inputs.buildConfiguration || 'Release' }}
  SONAR_TOKEN:       ${{ secrets.SONAR_TOKEN }}
  ORGANIZATION_KEY:  lluanlima94-github
  PROJECT_KEY:       lluanlima94-github_my-recipe-book
  SONAR_HOST:        ${{ vars.SONAR_HOST }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # ───────── 2. Checkout ─────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0        

    # ───────── 3. JDK (scanner exige Java ≥ 17) ─────────
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 17

    # ───────── 4. .NET SDK ─────────
    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # ───────── 5. Caches (NuGet + Sonar) ─────────
    - uses: actions/cache@v4             # NuGet
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - uses: actions/cache@v4             # Cache do scanner
      id: sonar-scanner
      with:
        path: .sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: |
          ${{ runner.os }}-sonar-scanner

    - name: Instalar dotnet‑sonarscanner (se não veio do cache)
      if: steps.sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p .sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

    # ───────── 6. Restore ─────────
    - run: dotnet restore

    # ───────── 7. Sonar BEGIN ─────────
    - name: Sonar – begin
      run: |
        .sonar/scanner/dotnet-sonarscanner begin \
          /o:"$ORGANIZATION_KEY" \
          /k:"$PROJECT_KEY" \
          /d:sonar.host.url="$SONAR_HOST" \
          /d:sonar.token="$SONAR_TOKEN" \
          /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
          /d:sonar.branch.name="${{ github.head_ref || github.ref_name }}"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # ───────── 8. Build ─────────
    - run: dotnet build --configuration "$BUILD_CONFIGURATION" --no-restore

    # ───────── 9. Teste + cobertura (gera coverage.opencover.xml) ─────────
    - run: |
        dotnet test \
          --configuration "$BUILD_CONFIGURATION" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=opencover \
          --logger "trx" \
          --no-build

    # ───────── 10. Sonar END ─────────
    - name: Sonar – end (qualidade)
      run: .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"
      env: 
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
